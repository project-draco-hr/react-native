{
  final String bundleURL=createBundleURL(getDebugServerHost(),jsModulePath,getDevMode(),getHMR(),getJSMinifyMode());
  final Request request=new Request.Builder().url(bundleURL).build();
  mDownloadBundleFromURLCall=Assertions.assertNotNull(mClient.newCall(request));
  mDownloadBundleFromURLCall.enqueue(new Callback(){
    @Override public void onFailure(    Call call,    IOException e){
      if (mDownloadBundleFromURLCall == null || mDownloadBundleFromURLCall.isCanceled()) {
        mDownloadBundleFromURLCall=null;
        return;
      }
      mDownloadBundleFromURLCall=null;
      callback.onFailure(DebugServerException.makeGeneric("Could not connect to development server.","URL: " + call.request().url().toString(),e));
    }
    @Override public void onResponse(    Call call,    Response response) throws IOException {
      if (mDownloadBundleFromURLCall == null || mDownloadBundleFromURLCall.isCanceled()) {
        mDownloadBundleFromURLCall=null;
        return;
      }
      mDownloadBundleFromURLCall=null;
      if (!response.isSuccessful()) {
        String body=response.body().string();
        DebugServerException debugServerException=DebugServerException.parse(body);
        if (debugServerException != null) {
          callback.onFailure(debugServerException);
        }
 else {
          StringBuilder sb=new StringBuilder();
          sb.append("The development server returned response error code: ").append(response.code()).append("\n\n").append("URL: ").append(call.request().url().toString()).append("\n\n").append("Body:\n").append(body);
          callback.onFailure(new DebugServerException(sb.toString()));
        }
        return;
      }
      Sink output=null;
      try {
        output=Okio.sink(outputFile);
        Okio.buffer(response.body().source()).readAll(output);
        callback.onSuccess();
      }
  finally {
        if (output != null) {
          output.close();
        }
      }
    }
  }
);
}
