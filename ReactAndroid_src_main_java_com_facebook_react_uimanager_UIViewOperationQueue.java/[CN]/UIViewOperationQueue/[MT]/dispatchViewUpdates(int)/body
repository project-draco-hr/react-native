{
  final ArrayList<UIOperation> operations=mOperations.isEmpty() ? null : mOperations;
  if (operations != null) {
    mOperations=new ArrayList<>();
  }
  final UIOperation[] nonBatchedOperations;
synchronized (mNonBatchedOperationsLock) {
    if (!mNonBatchedOperations.isEmpty()) {
      nonBatchedOperations=mNonBatchedOperations.toArray(new UIOperation[mNonBatchedOperations.size()]);
      mNonBatchedOperations.clear();
    }
 else {
      nonBatchedOperations=null;
    }
  }
  if (mViewHierarchyUpdateDebugListener != null) {
    mViewHierarchyUpdateDebugListener.onViewHierarchyUpdateEnqueued();
  }
synchronized (mDispatchRunnablesLock) {
    mDispatchUIRunnables.add(new Runnable(){
      @Override public void run(){
        SystraceMessage.beginSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE,"DispatchUI").arg("BatchId",batchId).flush();
        try {
          if (nonBatchedOperations != null) {
            for (            UIOperation op : nonBatchedOperations) {
              op.execute();
            }
          }
          if (operations != null) {
            for (int i=0; i < operations.size(); i++) {
              operations.get(i).execute();
            }
          }
          mNativeViewHierarchyManager.clearLayoutAnimation();
          if (mViewHierarchyUpdateDebugListener != null) {
            mViewHierarchyUpdateDebugListener.onViewHierarchyUpdateFinished();
          }
        }
  finally {
          Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE);
        }
      }
    }
);
  }
  if (!mIsDispatchUIFrameCallbackEnqueued) {
    UiThreadUtil.runOnUiThread(new Runnable(){
      @Override public void run(){
        flushPendingBatches();
      }
    }
);
  }
}
