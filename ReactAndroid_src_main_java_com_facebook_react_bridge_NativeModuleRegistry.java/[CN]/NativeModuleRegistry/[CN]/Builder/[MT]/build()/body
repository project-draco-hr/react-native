{
  JsonFactory jsonFactory=new JsonFactory();
  StringWriter writer=new StringWriter();
  try {
    JsonGenerator jg=jsonFactory.createGenerator(writer);
    jg.writeStartObject();
    for (    ModuleDefinition module : mModuleDefinitions) {
      jg.writeObjectFieldStart(module.name);
      jg.writeNumberField("moduleID",module.id);
      jg.writeObjectFieldStart("methods");
      for (int i=0; i < module.methods.size(); i++) {
        MethodRegistration method=module.methods.get(i);
        jg.writeObjectFieldStart(method.name);
        jg.writeNumberField("methodID",i);
        jg.writeStringField("type",method.method.getType());
        jg.writeEndObject();
      }
      jg.writeEndObject();
      module.target.writeConstantsField(jg,"constants");
      jg.writeEndObject();
    }
    jg.writeEndObject();
    jg.close();
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Unable to serialize Java module configuration",ioe);
  }
  String moduleDefinitionJson=writer.getBuffer().toString();
  return new NativeModuleRegistry(mModuleDefinitions,mModuleInstances,moduleDefinitionJson);
}
