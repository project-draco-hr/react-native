{
  layoutContext.currentGenerationCount++;
  CSSMeasureMode widthMeasureMode=CSSMeasureMode.UNDEFINED;
  CSSMeasureMode heightMeasureMode=CSSMeasureMode.UNDEFINED;
  if (!Float.isNaN(availableWidth)) {
    widthMeasureMode=CSSMeasureMode.EXACTLY;
  }
 else   if (node.style.dimensions[DIMENSION_WIDTH] >= 0.0) {
    float marginAxisRow=(node.style.margin.getWithFallback(leadingSpacing[CSS_FLEX_DIRECTION_ROW],leading[CSS_FLEX_DIRECTION_ROW]) + node.style.margin.getWithFallback(trailingSpacing[CSS_FLEX_DIRECTION_ROW],trailing[CSS_FLEX_DIRECTION_ROW]));
    availableWidth=node.style.dimensions[DIMENSION_WIDTH] + marginAxisRow;
    widthMeasureMode=CSSMeasureMode.EXACTLY;
  }
 else   if (node.style.maxWidth >= 0.0) {
    availableWidth=node.style.maxWidth;
    widthMeasureMode=CSSMeasureMode.AT_MOST;
  }
  if (!Float.isNaN(availableHeight)) {
    heightMeasureMode=CSSMeasureMode.EXACTLY;
  }
 else   if (node.style.dimensions[DIMENSION_HEIGHT] >= 0.0) {
    float marginAxisColumn=(node.style.margin.getWithFallback(leadingSpacing[CSS_FLEX_DIRECTION_COLUMN],leading[CSS_FLEX_DIRECTION_COLUMN]) + node.style.margin.getWithFallback(trailingSpacing[CSS_FLEX_DIRECTION_COLUMN],trailing[CSS_FLEX_DIRECTION_COLUMN]));
    availableHeight=node.style.dimensions[DIMENSION_HEIGHT] + marginAxisColumn;
    heightMeasureMode=CSSMeasureMode.EXACTLY;
  }
 else   if (node.style.maxHeight >= 0.0) {
    availableHeight=node.style.maxHeight;
    heightMeasureMode=CSSMeasureMode.AT_MOST;
  }
  if (layoutNodeInternal(layoutContext,node,availableWidth,availableHeight,parentDirection,widthMeasureMode,heightMeasureMode,true,"initial")) {
    setPosition(node,node.layout.direction);
  }
}
