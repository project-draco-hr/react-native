{
  Method[] declaredMethods=cls.getDeclaredMethods();
  for (int i=0; i < declaredMethods.length; i++) {
    Method method=declaredMethods[i];
    ReactProp annotation=method.getAnnotation(ReactProp.class);
    if (annotation != null) {
      Class<?>[] paramTypes=method.getParameterTypes();
      if (paramTypes.length != 2) {
        throw new RuntimeException("Wrong number of args for prop setter: " + cls.getName() + "#"+ method.getName());
      }
      if (!View.class.isAssignableFrom(paramTypes[0])) {
        throw new RuntimeException("First param should be a view subclass to be updated: " + cls.getName() + "#"+ method.getName());
      }
      props.put(annotation.name(),createPropSetter(annotation,method,paramTypes[1]));
    }
    ReactPropGroup groupAnnotation=method.getAnnotation(ReactPropGroup.class);
    if (groupAnnotation != null) {
      Class<?>[] paramTypes=method.getParameterTypes();
      if (paramTypes.length != 3) {
        throw new RuntimeException("Wrong number of args for group prop setter: " + cls.getName() + "#"+ method.getName());
      }
      if (!View.class.isAssignableFrom(paramTypes[0])) {
        throw new RuntimeException("First param should be a view subclass to be updated: " + cls.getName() + "#"+ method.getName());
      }
      if (paramTypes[1] != int.class) {
        throw new RuntimeException("Second argument should be property index: " + cls.getName() + "#"+ method.getName());
      }
      createPropSetters(groupAnnotation,method,paramTypes[2],props);
    }
  }
}
