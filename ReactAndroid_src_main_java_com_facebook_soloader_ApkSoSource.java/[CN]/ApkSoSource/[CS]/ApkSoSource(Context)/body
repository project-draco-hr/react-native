{
  super(SysUtil.createLibsDirectory(context),DirectorySoSource.RESOLVE_DEPENDENCIES);
  try (JarFile apk=new JarFile(context.getApplicationInfo().publicSourceDir)){
    File libsDir=super.soDirectory;
    if (DEBUG) {
      Log.v(TAG,"synchronizing log directory: " + libsDir);
    }
    Map<String,SoInfo> providedLibraries=findProvidedLibraries(apk);
    try (FileLocker lock=SysUtil.lockLibsDirectory(context)){
      File extantFiles[]=libsDir.listFiles();
      for (int i=0; i < extantFiles.length; ++i) {
        File extantFile=extantFiles[i];
        if (DEBUG) {
          Log.v(TAG,"considering libdir file: " + extantFile);
        }
        String name=extantFile.getName();
        SoInfo so=providedLibraries.get(name);
        boolean shouldDelete=(so == null || so.entry.getSize() != extantFile.length() || so.entry.getTime() != extantFile.lastModified());
        boolean upToDate=(so != null && !shouldDelete);
        if (shouldDelete) {
          if (DEBUG) {
            Log.v(TAG,"deleting obsolete or unexpected file: " + extantFile);
          }
          SysUtil.deleteOrThrow(extantFile);
        }
        if (upToDate) {
          if (DEBUG) {
            Log.v(TAG,"found up-to-date library: " + extantFile);
          }
          providedLibraries.remove(name);
        }
      }
      for (      SoInfo so : providedLibraries.values()) {
        JarEntry entry=so.entry;
        try (InputStream is=apk.getInputStream(entry)){
          if (DEBUG) {
            Log.v(TAG,"extracting library: " + so.soName);
          }
          SysUtil.reliablyCopyExecutable(is,new File(libsDir,so.soName),entry.getSize(),entry.getTime());
        }
         SysUtil.freeCopyBuffer();
      }
    }
   }
 }
