{
  int executorTokenOffset=0;
  if (BaseJavaModule.this.supportsWebWorkers()) {
    if (paramTypes[0] != ExecutorToken.class) {
      throw new RuntimeException("Module " + BaseJavaModule.this + " supports web workers, but "+ mMethod.getName()+ "does not take an ExecutorToken as its first parameter.");
    }
    executorTokenOffset=1;
  }
  ArgumentExtractor[] argumentExtractors=new ArgumentExtractor[paramTypes.length - executorTokenOffset];
  for (int i=0; i < paramTypes.length - executorTokenOffset; i+=argumentExtractors[i].getJSArgumentsNeeded()) {
    int paramIndex=i + executorTokenOffset;
    Class argumentClass=paramTypes[paramIndex];
    if (argumentClass == Boolean.class || argumentClass == boolean.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_BOOLEAN;
    }
 else     if (argumentClass == Integer.class || argumentClass == int.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_INTEGER;
    }
 else     if (argumentClass == Double.class || argumentClass == double.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_DOUBLE;
    }
 else     if (argumentClass == Float.class || argumentClass == float.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_FLOAT;
    }
 else     if (argumentClass == String.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_STRING;
    }
 else     if (argumentClass == Callback.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_CALLBACK;
    }
 else     if (argumentClass == Promise.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_PROMISE;
      Assertions.assertCondition(paramIndex == paramTypes.length - 1,"Promise must be used as last parameter only");
      mType=METHOD_TYPE_REMOTE_ASYNC;
    }
 else     if (argumentClass == ReadableMap.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_MAP;
    }
 else     if (argumentClass == ReadableArray.class) {
      argumentExtractors[i]=ARGUMENT_EXTRACTOR_ARRAY;
    }
 else {
      throw new RuntimeException("Got unknown argument class: " + argumentClass.getSimpleName());
    }
  }
  return argumentExtractors;
}
