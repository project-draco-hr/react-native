{
  PowerMockito.mockStatic(Arguments.class);
  when(Arguments.createArray()).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return new SimpleArray();
    }
  }
);
  PowerMockito.mockStatic(SystemClock.class);
  when(SystemClock.currentTimeMillis()).thenReturn(mCurrentTimeNs / 1000000);
  when(SystemClock.nanoTime()).thenReturn(mCurrentTimeNs);
  mChoreographerMock=mock(ReactChoreographer.class);
  PowerMockito.mockStatic(ReactChoreographer.class);
  when(ReactChoreographer.getInstance()).thenReturn(mChoreographerMock);
  CatalystInstance catalystInstance=mock(CatalystInstance.class);
  ReactApplicationContext reactContext=mock(ReactApplicationContext.class);
  when(reactContext.getCatalystInstance()).thenReturn(catalystInstance);
  mCurrentTimeNs=0;
  mPostFrameCallbackHandler=new PostFrameCallbackHandler();
  doAnswer(mPostFrameCallbackHandler).when(mChoreographerMock).postFrameCallback(eq(ReactChoreographer.CallbackType.TIMERS_EVENTS),any(Choreographer.FrameCallback.class));
  mTiming=new Timing(reactContext);
  mJSTimersMock=mock(JSTimersExecution.class);
  when(catalystInstance.getJSModule(JSTimersExecution.class)).thenReturn(mJSTimersMock);
  mTiming.initialize();
}
