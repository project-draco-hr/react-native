{
  if (isPaused.get()) {
    return;
  }
  long frameTimeMillis=frameTimeNanos / 1000000;
synchronized (mTimerGuard) {
    while (!mTimers.isEmpty() && mTimers.peek().mTargetTime < frameTimeMillis) {
      Timer timer=mTimers.poll();
      WritableArray timersForContext=mTimersToCall.get(timer.mExecutorToken);
      if (timersForContext == null) {
        timersForContext=Arguments.createArray();
        mTimersToCall.put(timer.mExecutorToken,timersForContext);
      }
      timersForContext.pushInt(timer.mCallbackID);
      if (timer.mRepeat) {
        timer.mTargetTime=frameTimeMillis + timer.mInterval;
        mTimers.add(timer);
      }
 else {
        SparseArray<Timer> timers=mTimerIdsToTimers.get(timer.mExecutorToken);
        if (timers != null) {
          timers.remove(timer.mCallbackID);
          if (timers.size() == 0) {
            mTimerIdsToTimers.remove(timer.mExecutorToken);
          }
        }
      }
    }
  }
  for (  Map.Entry<ExecutorToken,WritableArray> entry : mTimersToCall.entrySet()) {
    getReactApplicationContext().getJSModule(entry.getKey(),JSTimersExecution.class).callTimers(entry.getValue());
  }
  mTimersToCall.clear();
  Assertions.assertNotNull(mReactChoreographer).postFrameCallback(ReactChoreographer.CallbackType.TIMERS_EVENTS,this);
}
