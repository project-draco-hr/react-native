{
  long deviceTime=SystemClock.currentTimeMillis();
  long remoteTime=(long)jsSchedulingTime;
  if (mDevSupportManager.getDevSupportEnabled()) {
    long driftTime=Math.abs(remoteTime - deviceTime);
    if (driftTime > 60000) {
      getReactApplicationContext().getJSModule(executorToken,JSTimersExecution.class).emitTimeDriftWarning("Debugger and device times have drifted by more than 60s. Please correct this by " + "running adb shell \"date `date +%m%d%H%M%Y.%S`\" on your debugger machine.");
    }
  }
  long adjustedDuration=Math.max(0,remoteTime - deviceTime + duration);
  if (duration == 0 && !repeat) {
    WritableArray timerToCall=Arguments.createArray();
    timerToCall.pushInt(callbackID);
    getReactApplicationContext().getJSModule(executorToken,JSTimersExecution.class).callTimers(timerToCall);
    return;
  }
  long initialTargetTime=SystemClock.nanoTime() / 1000000 + adjustedDuration;
  Timer timer=new Timer(executorToken,callbackID,initialTargetTime,duration,repeat);
synchronized (mTimerGuard) {
    mTimers.add(timer);
    SparseArray<Timer> timersForContext=mTimerIdsToTimers.get(executorToken);
    if (timersForContext == null) {
      timersForContext=new SparseArray<>();
      mTimerIdsToTimers.put(executorToken,timersForContext);
    }
    timersForContext.put(callbackID,timer);
  }
}
