{
  Set<? extends Element> reactModuleListElements=roundEnv.getElementsAnnotatedWith(ReactModuleList.class);
  for (  Element reactModuleListElement : reactModuleListElements) {
    TypeElement typeElement=(TypeElement)reactModuleListElement;
    ClassName className=ClassName.get(typeElement);
    String packageName=ClassName.get(typeElement).packageName();
    String fileName=className.simpleName();
    ReactModuleList reactModuleList=typeElement.getAnnotation(ReactModuleList.class);
    List<String> nativeModules=new ArrayList<>();
    try {
      reactModuleList.value();
    }
 catch (    MirroredTypesException mirroredTypesException) {
      List<? extends TypeMirror> typeMirrors=mirroredTypesException.getTypeMirrors();
      for (      TypeMirror typeMirror : typeMirrors) {
        nativeModules.add(typeMirror.toString());
      }
    }
    MethodSpec getReactModuleInfosMethod=MethodSpec.methodBuilder("getReactModuleInfos").addModifiers(PUBLIC).addCode(getCodeBlockForReactModuleInfos(nativeModules)).returns(MAP_TYPE).build();
    TypeSpec reactModulesInfosTypeSpec=TypeSpec.classBuilder(fileName + "$$ReactModuleInfoProvider").addModifiers(Modifier.PUBLIC).addMethod(getReactModuleInfosMethod).build();
    JavaFile javaFile=JavaFile.builder(packageName,reactModulesInfosTypeSpec).addFileComment("Generated by " + getClass().getName()).build();
    try {
      javaFile.writeTo(mFiler);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return true;
}
