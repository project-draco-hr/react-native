{
  mDestinationPath=new File(folder.getRoot(),DESTINATION_NAME);
  mIOBuffer=new byte[16 * 1024];
  mContext=mock(Context.class);
  mAssetManager=mock(AssetManager.class);
  when(mContext.getAssets()).thenReturn(mAssetManager);
  when(mAssetManager.open(eq(NAME_IN_APK),anyInt())).then(new Answer<FileInputStream>(){
    @Override public FileInputStream answer(    InvocationOnMock invocation) throws Throwable {
      final ByteArrayInputStream bais=new ByteArrayInputStream(ASSET_DATA);
      final FileInputStream fis=mock(FileInputStream.class);
      when(fis.read()).then(new Answer<Integer>(){
        @Override public Integer answer(        InvocationOnMock invocation) throws Throwable {
          return bais.read();
        }
      }
);
      when(fis.read(any(byte[].class))).then(new Answer<Integer>(){
        @Override public Integer answer(        InvocationOnMock invocation) throws Throwable {
          return bais.read((byte[])invocation.getArguments()[0]);
        }
      }
);
      when(fis.read(any(byte[].class),any(int.class),any(int.class))).then(new Answer<Integer>(){
        @Override public Integer answer(        InvocationOnMock invocation) throws Throwable {
          return bais.read((byte[])invocation.getArguments()[0],(int)invocation.getArguments()[1],(int)invocation.getArguments()[2]);
        }
      }
);
      when(fis.available()).then(new Answer<Integer>(){
        @Override public Integer answer(        InvocationOnMock invocation) throws Throwable {
          return bais.available();
        }
      }
);
      return fis;
    }
  }
);
}
