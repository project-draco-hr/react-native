{
  final JSDebuggerWebSocketClient client=new JSDebuggerWebSocketClient();
  final Handler timeoutHandler=new Handler();
  client.connect(webSocketServerUrl,new JSDebuggerWebSocketClient.JSDebuggerCallback(){
    @Override public void onSuccess(    @Nullable String response){
      client.prepareJSRuntime(new JSDebuggerWebSocketClient.JSDebuggerCallback(){
        @Override public void onSuccess(        @Nullable String response){
          timeoutHandler.removeCallbacksAndMessages(null);
          mWebSocketClient=client;
          callback.onSuccess();
        }
        @Override public void onFailure(        Throwable cause){
          timeoutHandler.removeCallbacksAndMessages(null);
          callback.onFailure(cause);
        }
      }
);
    }
    @Override public void onFailure(    Throwable cause){
      callback.onFailure(cause);
    }
  }
);
  timeoutHandler.postDelayed(new Runnable(){
    @Override public void run(){
      client.closeQuietly();
      callback.onFailure(new WebsocketExecutorTimeoutException("Timeout while connecting to remote debugger"));
    }
  }
,CONNECT_TIMEOUT_MS);
}
