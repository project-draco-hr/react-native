{
  List<ModuleSpec> moduleSpecList=new ArrayList();
  moduleSpecList.add(new ModuleSpec(AnimationsDebugModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new AnimationsDebugModule(reactContext,mReactInstanceManager.getDevSupportManager().getDevSettings());
    }
  }
));
  moduleSpecList.add(new ModuleSpec(AndroidInfoModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new AndroidInfoModule();
    }
  }
));
  moduleSpecList.add(new ModuleSpec(DeviceEventManagerModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new DeviceEventManagerModule(reactContext,mHardwareBackBtnHandler);
    }
  }
));
  moduleSpecList.add(new ModuleSpec(ExceptionsManagerModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new ExceptionsManagerModule(mReactInstanceManager.getDevSupportManager());
    }
  }
));
  moduleSpecList.add(new ModuleSpec(Timing.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new Timing(reactContext,mReactInstanceManager.getDevSupportManager());
    }
  }
));
  moduleSpecList.add(new ModuleSpec(SourceCodeModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new SourceCodeModule(mReactInstanceManager.getSourceUrl());
    }
  }
));
  moduleSpecList.add(new ModuleSpec(UIManagerModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return createUIManager(reactContext);
    }
  }
));
  if (ReactBuildConfig.DEBUG) {
    moduleSpecList.add(new ModuleSpec(DebugComponentOwnershipModule.class,new Provider<NativeModule>(){
      @Override public NativeModule get(){
        return new DebugComponentOwnershipModule(reactContext);
      }
    }
));
    moduleSpecList.add(new ModuleSpec(JSCHeapCapture.class,new Provider<NativeModule>(){
      @Override public NativeModule get(){
        return new JSCHeapCapture(reactContext);
      }
    }
));
    moduleSpecList.add(new ModuleSpec(JSCSamplingProfiler.class,new Provider<NativeModule>(){
      @Override public NativeModule get(){
        return new JSCSamplingProfiler(reactContext);
      }
    }
));
  }
  return moduleSpecList;
}
