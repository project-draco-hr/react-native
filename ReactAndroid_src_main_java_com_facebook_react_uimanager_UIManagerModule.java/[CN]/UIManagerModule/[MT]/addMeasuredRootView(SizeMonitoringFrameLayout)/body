{
  final int tag=mNextRootViewTag;
  mNextRootViewTag+=ROOT_VIEW_TAG_INCREMENT;
  final ReactShadowNode rootCSSNode=new ReactShadowNode();
  rootCSSNode.setReactTag(tag);
  final ThemedReactContext themedRootContext=new ThemedReactContext(getReactApplicationContext(),rootView.getContext());
  rootCSSNode.setThemedContext(themedRootContext);
  if (rootView.getLayoutParams() != null && rootView.getLayoutParams().width > 0 && rootView.getLayoutParams().height > 0) {
    rootCSSNode.setStyleWidth(rootView.getLayoutParams().width);
    rootCSSNode.setStyleHeight(rootView.getLayoutParams().height);
  }
 else {
    rootCSSNode.setStyleWidth(rootView.getWidth());
    rootCSSNode.setStyleHeight(rootView.getHeight());
  }
  rootCSSNode.setViewClassName("Root");
  rootView.setOnSizeChangedListener(new SizeMonitoringFrameLayout.OnSizeChangedListener(){
    @Override public void onSizeChanged(    final int width,    final int height,    int oldW,    int oldH){
      getReactApplicationContext().runOnNativeModulesQueueThread(new Runnable(){
        @Override public void run(){
          updateRootNodeSize(rootCSSNode,width,height);
        }
      }
);
    }
  }
);
  mShadowNodeRegistry.addRootNode(rootCSSNode);
  if (UiThreadUtil.isOnUiThread()) {
    mNativeViewHierarchyManager.addRootView(tag,rootView,themedRootContext);
  }
 else {
    final Semaphore semaphore=new Semaphore(0);
    getReactApplicationContext().runOnUiQueueThread(new Runnable(){
      @Override public void run(){
        mNativeViewHierarchyManager.addRootView(tag,rootView,themedRootContext);
        semaphore.release();
      }
    }
);
    try {
      SoftAssertions.assertCondition(semaphore.tryAcquire(5000,TimeUnit.MILLISECONDS),"Timed out adding root view");
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  return tag;
}
