{
  final ReactTestFactory.ReactInstanceEasyBuilder builder=getReactTestFactory().getCatalystInstanceBuilder();
  ReactTestFactory.ReactInstanceEasyBuilder postBuilder=new ReactTestFactory.ReactInstanceEasyBuilder(){
    @Override public ReactTestFactory.ReactInstanceEasyBuilder setContext(    Context context){
      builder.setContext(context);
      return this;
    }
    @Override public ReactTestFactory.ReactInstanceEasyBuilder addNativeModule(    NativeModule module){
      builder.addNativeModule(module);
      return this;
    }
    @Override public ReactTestFactory.ReactInstanceEasyBuilder addJSModule(    Class moduleInterfaceClass){
      builder.addJSModule(moduleInterfaceClass);
      return this;
    }
    @Override public CatalystInstance build(){
      final CatalystInstance instance=builder.build();
      try {
        instance.getReactQueueConfiguration().getJSQueueThread().callOnQueue(new Callable<Void>(){
          @Override public Void call() throws Exception {
            testCase.initializeWithInstance(instance);
            instance.runJSBundle();
            return null;
          }
        }
).get();
        InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable(){
          @Override public void run(){
            instance.initialize();
          }
        }
);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      testCase.waitForBridgeAndUIIdle();
      return instance;
    }
  }
;
  postBuilder.setContext(testCase.getContext());
  return postBuilder;
}
