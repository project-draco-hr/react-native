{
  EventDispatcher eventDispatcher=getReactContext().getNativeModule(UIManagerModule.class).getEventDispatcher();
  ReactEditText reactEditText=getViewByTestId("tokenizedInput");
  String newText="#Things and more #things";
  int contentWidth=reactEditText.getWidth();
  int contentHeight=reactEditText.getHeight();
  int start=0;
  int count=newText.length();
  eventDispatcher.dispatchEvent(new ReactTextChangedEvent(reactEditText.getId(),SystemClock.elapsedRealtime(),newText.toString(),(int)PixelUtil.toDIPFromPixel(contentWidth),(int)PixelUtil.toDIPFromPixel(contentHeight),reactEditText.incrementAndGetEventCounter()));
  eventDispatcher.dispatchEvent(new ReactTextInputEvent(reactEditText.getId(),SystemClock.elapsedRealtime(),newText.toString(),"",start,start + count - 1));
  waitForBridgeAndUIIdle();
  ForegroundColorSpan[] spans=reactEditText.getText().getSpans(0,reactEditText.getText().length(),ForegroundColorSpan.class);
  assertEquals(2,spans.length);
  assertEquals(spans[0].getForegroundColor(),spans[1].getForegroundColor());
  assertEquals(0,reactEditText.getText().getSpanStart(spans[1]));
  assertEquals(7,reactEditText.getText().getSpanEnd(spans[1]));
  assertEquals(newText.length() - 7,reactEditText.getText().getSpanStart(spans[0]));
  assertEquals(newText.length(),reactEditText.getText().getSpanEnd(spans[0]));
  String moreText="andsuch ";
  String previousText=newText;
  newText+=moreText;
  count=moreText.length();
  start=previousText.length();
  eventDispatcher.dispatchEvent(new ReactTextChangedEvent(reactEditText.getId(),SystemClock.elapsedRealtime(),newText.toString(),(int)PixelUtil.toDIPFromPixel(contentWidth),(int)PixelUtil.toDIPFromPixel(contentHeight),reactEditText.incrementAndGetEventCounter()));
  eventDispatcher.dispatchEvent(new ReactTextInputEvent(reactEditText.getId(),SystemClock.elapsedRealtime(),moreText,"",start,start + count - 1));
  waitForBridgeAndUIIdle();
  spans=reactEditText.getText().getSpans(0,reactEditText.getText().length(),ForegroundColorSpan.class);
  assertEquals(2,spans.length);
  assertEquals(spans[0].getForegroundColor(),spans[1].getForegroundColor());
  assertEquals(0,reactEditText.getText().getSpanStart(spans[1]));
  assertEquals(7,reactEditText.getText().getSpanEnd(spans[1]));
  assertEquals(newText.length() - 15,reactEditText.getText().getSpanStart(spans[0]));
  assertEquals(newText.length() - 1,reactEditText.getText().getSpanEnd(spans[0]));
  moreText="morethings";
  previousText=newText;
  newText+=moreText;
  count=moreText.length();
  start=previousText.length();
  eventDispatcher.dispatchEvent(new ReactTextChangedEvent(reactEditText.getId(),SystemClock.elapsedRealtime(),newText.toString(),(int)PixelUtil.toDIPFromPixel(contentWidth),(int)PixelUtil.toDIPFromPixel(contentHeight),reactEditText.incrementAndGetEventCounter()));
  eventDispatcher.dispatchEvent(new ReactTextInputEvent(reactEditText.getId(),SystemClock.elapsedRealtime(),moreText,"",start,start + count - 1));
  waitForBridgeAndUIIdle();
  spans=reactEditText.getText().getSpans(0,reactEditText.getText().length(),ForegroundColorSpan.class);
  assertEquals(spans[0].getForegroundColor(),spans[1].getForegroundColor());
  assertEquals(2,spans.length);
  assertEquals(0,reactEditText.getText().getSpanStart(spans[1]));
  assertEquals(7,reactEditText.getText().getSpanEnd(spans[1]));
  assertEquals(newText.length() - 25,reactEditText.getText().getSpanStart(spans[0]));
  assertEquals(newText.length() - 11,reactEditText.getText().getSpanEnd(spans[0]));
}
