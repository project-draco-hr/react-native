{
  BaseViewPropertyApplicator.applyCommonViewProperties(view,props);
  if (props.hasKey(PROP_FONT_SIZE)) {
    float textSize=props.getFloat(PROP_FONT_SIZE,ViewDefaults.FONT_SIZE_SP);
    view.setTextSize(TypedValue.COMPLEX_UNIT_PX,(int)Math.ceil(PixelUtil.toPixelFromSP(textSize)));
  }
  if (props.hasKey(ViewProps.COLOR)) {
    if (props.isNull(ViewProps.COLOR)) {
      view.setTextColor(DefaultStyleValuesUtil.getDefaultTextColor(view.getContext()));
    }
 else {
      final int textColor=props.getInt(ViewProps.COLOR,Color.TRANSPARENT);
      view.setTextColor(textColor);
    }
  }
  if (props.hasKey(PROP_TEXT_INPUT_HINT)) {
    view.setHint(props.getString(PROP_TEXT_INPUT_HINT));
  }
  if (props.hasKey(PROP_TEXT_INPUT_HINT_COLOR)) {
    if (props.isNull(PROP_TEXT_INPUT_HINT_COLOR)) {
      view.setHintTextColor(DefaultStyleValuesUtil.getDefaultTextColorHint(view.getContext()));
    }
 else {
      final int hintColor=props.getInt(PROP_TEXT_INPUT_HINT_COLOR,Color.TRANSPARENT);
      view.setHintTextColor(hintColor);
    }
  }
  if (props.hasKey(PROP_TEXT_INPUT_UNDERLINE_COLOR)) {
    if (props.isNull(PROP_TEXT_INPUT_UNDERLINE_COLOR)) {
      view.getBackground().clearColorFilter();
    }
 else {
      final int underlineColor=props.getInt(PROP_TEXT_INPUT_UNDERLINE_COLOR,Color.TRANSPARENT);
      view.getBackground().setColorFilter(underlineColor,PorterDuff.Mode.SRC_IN);
    }
  }
  if (props.hasKey(PROP_TEXT_ALIGN)) {
    int gravityHorizontal=props.getInt(PROP_TEXT_ALIGN,0);
    view.setGravityHorizontal(gravityHorizontal);
  }
  if (props.hasKey(PROP_TEXT_ALIGN_VERTICAL)) {
    int gravityVertical=props.getInt(PROP_TEXT_ALIGN_VERTICAL,0);
    view.setGravityVertical(gravityVertical);
  }
  if (props.hasKey(PROP_TEXT_INPUT_EDITABLE)) {
    if (props.getBoolean(PROP_TEXT_INPUT_EDITABLE,true)) {
      view.setEnabled(true);
    }
 else {
      view.setEnabled(false);
    }
  }
  int newInputType=view.getInputType();
  if (props.hasKey(PROP_TEXT_INPUT_AUTO_CORRECT)) {
    newInputType&=~(InputType.TYPE_TEXT_FLAG_AUTO_CORRECT | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);
    if (props.getBoolean(PROP_TEXT_INPUT_AUTO_CORRECT,false)) {
      newInputType|=InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
    }
 else     if (!props.isNull(PROP_TEXT_INPUT_AUTO_CORRECT)) {
      newInputType|=InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
    }
  }
  if (props.hasKey(PROP_TEXT_INPUT_MULTILINE)) {
    if (props.getBoolean(PROP_TEXT_INPUT_MULTILINE,false)) {
      newInputType|=InputType.TYPE_TEXT_FLAG_MULTI_LINE;
    }
 else {
      newInputType&=~InputType.TYPE_TEXT_FLAG_MULTI_LINE;
    }
  }
  if (props.hasKey(PROP_TEXT_INPUT_KEYBOARD_TYPE)) {
    newInputType=newInputType & ~InputType.TYPE_CLASS_NUMBER & ~InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
    String keyboardType=props.getString(PROP_TEXT_INPUT_KEYBOARD_TYPE);
    if (KEYBOARD_TYPE_NUMERIC.equalsIgnoreCase(keyboardType)) {
      newInputType|=InputType.TYPE_CLASS_NUMBER;
    }
 else     if (KEYBOARD_TYPE_EMAIL_ADDRESS.equalsIgnoreCase(keyboardType)) {
      newInputType|=InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
    }
  }
  if (props.hasKey(PROP_TEXT_INPUT_PASSWORD)) {
    if (props.getBoolean(PROP_TEXT_INPUT_PASSWORD,false)) {
      newInputType|=InputType.TYPE_TEXT_VARIATION_PASSWORD;
    }
 else {
      newInputType&=~InputType.TYPE_TEXT_VARIATION_PASSWORD;
    }
  }
  if (props.hasKey(PROP_TEXT_INPUT_AUTO_CAPITALIZE)) {
    newInputType&=~(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_CAP_WORDS | InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
    int autoCapitalize=props.getInt(PROP_TEXT_INPUT_AUTO_CAPITALIZE,InputType.TYPE_CLASS_TEXT);
switch (autoCapitalize) {
case InputType.TYPE_TEXT_FLAG_CAP_SENTENCES:
case InputType.TYPE_TEXT_FLAG_CAP_WORDS:
case InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS:
case InputType.TYPE_CLASS_TEXT:
      newInputType|=autoCapitalize;
    break;
default :
  throw new JSApplicationCausedNativeException("Invalid autoCapitalize value: " + autoCapitalize);
}
}
if (view.getInputType() != newInputType) {
view.setInputType(newInputType);
}
if (props.hasKey(PROP_TEXT_INPUT_NUMLINES)) {
view.setLines(props.getInt(PROP_TEXT_INPUT_NUMLINES,1));
}
}
