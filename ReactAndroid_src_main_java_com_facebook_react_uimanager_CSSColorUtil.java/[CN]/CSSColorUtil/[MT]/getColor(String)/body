{
  if (colorString.startsWith("rgb(")) {
    Matcher rgbMatcher=RGB_COLOR_PATTERN.matcher(colorString);
    if (rgbMatcher.matches()) {
      return Color.rgb(validateColorComponent(Integer.parseInt(rgbMatcher.group(1))),validateColorComponent(Integer.parseInt(rgbMatcher.group(2))),validateColorComponent(Integer.parseInt(rgbMatcher.group(3))));
    }
 else {
      throw new JSApplicationIllegalArgumentException("Invalid color: " + colorString);
    }
  }
 else   if (colorString.startsWith("rgba(")) {
    Matcher rgbaMatcher=RGBA_COLOR_PATTERN.matcher(colorString);
    if (rgbaMatcher.matches()) {
      return Color.argb((int)(Float.parseFloat(rgbaMatcher.group(4)) * 255),validateColorComponent(Integer.parseInt(rgbaMatcher.group(1))),validateColorComponent(Integer.parseInt(rgbaMatcher.group(2))),validateColorComponent(Integer.parseInt(rgbaMatcher.group(3))));
    }
 else {
      throw new JSApplicationIllegalArgumentException("Invalid color: " + colorString);
    }
  }
 else   if (colorString.startsWith("#")) {
    if (colorString.length() == 4) {
      int r=parseHexChar(colorString.charAt(1));
      int g=parseHexChar(colorString.charAt(2));
      int b=parseHexChar(colorString.charAt(3));
      r=r | (r << 4);
      g=g | (g << 4);
      b=b | (b << 4);
      return Color.rgb(r,g,b);
    }
 else {
      if (colorString.length() == 7) {
        try {
          return Color.parseColor(colorString);
        }
 catch (        IllegalArgumentException ex) {
          throw new JSApplicationIllegalArgumentException("Invalid color: " + colorString);
        }
      }
 else {
        throw new JSApplicationIllegalArgumentException("Invalid color: " + colorString);
      }
    }
  }
 else {
    Integer color=sColorNameMap.get(colorString.toLowerCase());
    if (color != null) {
      return color;
    }
    throw new JSApplicationIllegalArgumentException("Unknown color: " + colorString);
  }
}
