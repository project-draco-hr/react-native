{
  PowerMockito.mockStatic(RequestBodyUtil.class);
  when(RequestBodyUtil.getFileInputStream(any(ReactContext.class),any(String.class))).thenReturn(mock(InputStream.class));
  when(RequestBodyUtil.create(any(MediaType.class),any(InputStream.class))).thenReturn(mock(RequestBody.class));
  List<JavaOnlyArray> headers=Arrays.asList(JavaOnlyArray.of("Accept","text/plain"),JavaOnlyArray.of("User-Agent","React test agent/1.0"),JavaOnlyArray.of("content-type","multipart/form-data"));
  JavaOnlyMap body=new JavaOnlyMap();
  JavaOnlyArray formData=new JavaOnlyArray();
  JavaOnlyMap bodyPart=new JavaOnlyMap();
  bodyPart.putString("string","value");
  bodyPart.putArray("headers",JavaOnlyArray.from(Arrays.asList(JavaOnlyArray.of("content-disposition","name"))));
  formData.pushMap(bodyPart);
  body.putArray("formData",formData);
  OkHttpClient httpClient=mock(OkHttpClient.class);
  when(httpClient.newCall(any(Request.class))).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Call callMock=mock(Call.class);
      return callMock;
    }
  }
);
  NetworkingModule networkingModule=new NetworkingModule(null,"",httpClient);
  networkingModule.sendRequest(mock(ExecutorToken.class),"POST","http://someurl/uploadFoo",0,JavaOnlyArray.from(headers),body,true,0);
  ArgumentCaptor<Request> argumentCaptor=ArgumentCaptor.forClass(Request.class);
  verify(httpClient).newCall(argumentCaptor.capture());
  assertThat(argumentCaptor.getValue().urlString()).isEqualTo("http://someurl/uploadFoo");
  assertThat(argumentCaptor.getValue().method()).isEqualTo("POST");
  assertThat(argumentCaptor.getValue().body().contentType().type()).isEqualTo(MultipartBuilder.FORM.type());
  assertThat(argumentCaptor.getValue().body().contentType().subtype()).isEqualTo(MultipartBuilder.FORM.subtype());
  Headers requestHeaders=argumentCaptor.getValue().headers();
  assertThat(requestHeaders.size()).isEqualTo(3);
  assertThat(requestHeaders.get("Accept")).isEqualTo("text/plain");
  assertThat(requestHeaders.get("User-Agent")).isEqualTo("React test agent/1.0");
  assertThat(requestHeaders.get("content-type")).isEqualTo("multipart/form-data");
}
