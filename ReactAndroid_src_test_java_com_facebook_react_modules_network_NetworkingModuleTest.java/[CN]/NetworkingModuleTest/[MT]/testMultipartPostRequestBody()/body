{
  InputStream inputStream=mock(InputStream.class);
  PowerMockito.mockStatic(RequestBodyUtil.class);
  when(RequestBodyUtil.getFileInputStream(any(ReactContext.class),any(String.class))).thenReturn(inputStream);
  when(RequestBodyUtil.create(any(MediaType.class),any(InputStream.class))).thenCallRealMethod();
  when(inputStream.available()).thenReturn("imageUri".length());
  final MultipartBody.Builder multipartBuilder=mock(MultipartBody.Builder.class);
  PowerMockito.whenNew(MultipartBody.Builder.class).withNoArguments().thenReturn(multipartBuilder);
  when(multipartBuilder.setType(any(MediaType.class))).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return multipartBuilder;
    }
  }
);
  when(multipartBuilder.addPart(any(Headers.class),any(RequestBody.class))).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return multipartBuilder;
    }
  }
);
  when(multipartBuilder.build()).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return mock(MultipartBody.class);
    }
  }
);
  List<JavaOnlyArray> headers=Arrays.asList(JavaOnlyArray.of("content-type","multipart/form-data"));
  JavaOnlyMap body=new JavaOnlyMap();
  JavaOnlyArray formData=new JavaOnlyArray();
  body.putArray("formData",formData);
  JavaOnlyMap bodyPart=new JavaOnlyMap();
  bodyPart.putString("string","locale");
  bodyPart.putArray("headers",JavaOnlyArray.from(Arrays.asList(JavaOnlyArray.of("content-disposition","user"))));
  formData.pushMap(bodyPart);
  JavaOnlyMap imageBodyPart=new JavaOnlyMap();
  imageBodyPart.putString("uri","imageUri");
  imageBodyPart.putArray("headers",JavaOnlyArray.from(Arrays.asList(JavaOnlyArray.of("content-type","image/jpg"),JavaOnlyArray.of("content-disposition","filename=photo.jpg"))));
  formData.pushMap(imageBodyPart);
  OkHttpClient httpClient=mock(OkHttpClient.class);
  when(httpClient.newCall(any(Request.class))).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Call callMock=mock(Call.class);
      return callMock;
    }
  }
);
  NetworkingModule networkingModule=new NetworkingModule(null,"",httpClient);
  networkingModule.sendRequest(mock(ExecutorToken.class),"POST","http://someurl/uploadFoo",0,JavaOnlyArray.from(headers),body,true,0);
  PowerMockito.verifyStatic(times(1));
  RequestBodyUtil.getFileInputStream(any(ReactContext.class),eq("imageUri"));
  PowerMockito.verifyStatic(times(1));
  RequestBodyUtil.create(MediaType.parse("image/jpg"),inputStream);
  verify(multipartBuilder).build();
  verify(multipartBuilder).setType(MultipartBody.FORM);
  ArgumentCaptor<Headers> headersArgumentCaptor=ArgumentCaptor.forClass(Headers.class);
  ArgumentCaptor<RequestBody> bodyArgumentCaptor=ArgumentCaptor.forClass(RequestBody.class);
  verify(multipartBuilder,times(2)).addPart(headersArgumentCaptor.capture(),bodyArgumentCaptor.capture());
  List<Headers> bodyHeaders=headersArgumentCaptor.getAllValues();
  assertThat(bodyHeaders.size()).isEqualTo(2);
  List<RequestBody> bodyRequestBody=bodyArgumentCaptor.getAllValues();
  assertThat(bodyRequestBody.size()).isEqualTo(2);
  assertThat(bodyHeaders.get(0).get("content-disposition")).isEqualTo("user");
  assertThat(bodyRequestBody.get(0).contentType()).isNull();
  assertThat(bodyRequestBody.get(0).contentLength()).isEqualTo("locale".getBytes().length);
  assertThat(bodyHeaders.get(1).get("content-disposition")).isEqualTo("filename=photo.jpg");
  assertThat(bodyRequestBody.get(1).contentType()).isEqualTo(MediaType.parse("image/jpg"));
  assertThat(bodyRequestBody.get(1).contentLength()).isEqualTo("imageUri".getBytes().length);
}
