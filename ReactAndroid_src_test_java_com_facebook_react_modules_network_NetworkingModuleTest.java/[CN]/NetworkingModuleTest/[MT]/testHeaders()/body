{
  OkHttpClient httpClient=mock(OkHttpClient.class);
  when(httpClient.newCall(any(Request.class))).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Call callMock=mock(Call.class);
      return callMock;
    }
  }
);
  OkHttpClient.Builder clientBuilder=mock(OkHttpClient.Builder.class);
  when(clientBuilder.build()).thenReturn(httpClient);
  when(httpClient.newBuilder()).thenReturn(clientBuilder);
  NetworkingModule networkingModule=new NetworkingModule(mock(ReactApplicationContext.class),"",httpClient);
  List<JavaOnlyArray> headers=Arrays.asList(JavaOnlyArray.of("Accept","text/plain"),JavaOnlyArray.of("User-Agent","React test agent/1.0"));
  networkingModule.sendRequest(mock(ExecutorToken.class),"GET","http://someurl/baz",0,JavaOnlyArray.from(headers),null,"text",true,0);
  ArgumentCaptor<Request> argumentCaptor=ArgumentCaptor.forClass(Request.class);
  verify(httpClient).newCall(argumentCaptor.capture());
  Headers requestHeaders=argumentCaptor.getValue().headers();
  assertThat(requestHeaders.size()).isEqualTo(2);
  assertThat(requestHeaders.get("Accept")).isEqualTo("text/plain");
  assertThat(requestHeaders.get("User-Agent")).isEqualTo("React test agent/1.0");
}
