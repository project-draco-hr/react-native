{
  return Arrays.asList(new ModuleSpec(AppStateModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new AppStateModule(context);
    }
  }
),new ModuleSpec(AsyncStorageModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new AsyncStorageModule(context);
    }
  }
),new ModuleSpec(CameraRollManager.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new CameraRollManager(context);
    }
  }
),new ModuleSpec(ClipboardModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new ClipboardModule(context);
    }
  }
),new ModuleSpec(DatePickerDialogModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new DatePickerDialogModule(context);
    }
  }
),new ModuleSpec(DialogModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new DialogModule(context);
    }
  }
),new ModuleSpec(FrescoModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new FrescoModule(context);
    }
  }
),new ModuleSpec(I18nManagerModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new I18nManagerModule(context);
    }
  }
),new ModuleSpec(ImageEditingManager.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new ImageEditingManager(context);
    }
  }
),new ModuleSpec(ImageLoaderModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new ImageLoaderModule(context);
    }
  }
),new ModuleSpec(ImageStoreManager.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new ImageStoreManager(context);
    }
  }
),new ModuleSpec(IntentModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new IntentModule(context);
    }
  }
),new ModuleSpec(LocationModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new LocationModule(context);
    }
  }
),new ModuleSpec(NativeAnimatedModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new NativeAnimatedModule(context);
    }
  }
),new ModuleSpec(NetworkingModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new NetworkingModule(context);
    }
  }
),new ModuleSpec(NetInfoModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new NetInfoModule(context);
    }
  }
),new ModuleSpec(PermissionsModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new PermissionsModule(context);
    }
  }
),new ModuleSpec(ShareModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new ShareModule(context);
    }
  }
),new ModuleSpec(StatusBarModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new StatusBarModule(context);
    }
  }
),new ModuleSpec(TimePickerDialogModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new TimePickerDialogModule(context);
    }
  }
),new ModuleSpec(ToastModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new ToastModule(context);
    }
  }
),new ModuleSpec(VibrationModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new VibrationModule(context);
    }
  }
),new ModuleSpec(WebSocketModule.class,new Provider<NativeModule>(){
    @Override public NativeModule get(){
      return new WebSocketModule(context);
    }
  }
));
}
