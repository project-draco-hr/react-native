{
  FLog.i(ReactConstants.TAG,"Creating react context.");
  ReactMarker.logMarker(CREATE_REACT_CONTEXT_START);
  mSourceUrl=jsBundleLoader.getSourceUrl();
  NativeModuleRegistry.Builder nativeRegistryBuilder=new NativeModuleRegistry.Builder();
  JavaScriptModuleRegistry.Builder jsModulesBuilder=new JavaScriptModuleRegistry.Builder();
  ReactApplicationContext reactContext=new ReactApplicationContext(mApplicationContext);
  if (mUseDeveloperSupport) {
    reactContext.setNativeModuleCallExceptionHandler(mDevSupportManager);
  }
  ReactMarker.logMarker(PROCESS_PACKAGES_START);
  Systrace.beginSection(TRACE_TAG_REACT_JAVA_BRIDGE,"createAndProcessCoreModulesPackage");
  try {
    CoreModulesPackage coreModulesPackage=new CoreModulesPackage(this,mBackBtnHandler,mUIImplementationProvider);
    processPackage(coreModulesPackage,reactContext,nativeRegistryBuilder,jsModulesBuilder);
  }
  finally {
    Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);
  }
  for (  ReactPackage reactPackage : mPackages) {
    Systrace.beginSection(TRACE_TAG_REACT_JAVA_BRIDGE,"createAndProcessCustomReactPackage");
    try {
      processPackage(reactPackage,reactContext,nativeRegistryBuilder,jsModulesBuilder);
    }
  finally {
      Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);
    }
  }
  ReactMarker.logMarker(PROCESS_PACKAGES_END);
  ReactMarker.logMarker(BUILD_NATIVE_MODULE_REGISTRY_START);
  Systrace.beginSection(TRACE_TAG_REACT_JAVA_BRIDGE,"buildNativeModuleRegistry");
  NativeModuleRegistry nativeModuleRegistry;
  try {
    nativeModuleRegistry=nativeRegistryBuilder.build();
  }
  finally {
    Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);
    ReactMarker.logMarker(BUILD_NATIVE_MODULE_REGISTRY_END);
  }
  NativeModuleCallExceptionHandler exceptionHandler=mNativeModuleCallExceptionHandler != null ? mNativeModuleCallExceptionHandler : mDevSupportManager;
  CatalystInstanceImpl.Builder catalystInstanceBuilder=new CatalystInstanceImpl.Builder().setReactQueueConfigurationSpec(ReactQueueConfigurationSpec.createDefault()).setJSExecutor(jsExecutor).setRegistry(nativeModuleRegistry).setJSModuleRegistry(jsModulesBuilder.build()).setJSBundleLoader(jsBundleLoader).setNativeModuleCallExceptionHandler(exceptionHandler);
  ReactMarker.logMarker(CREATE_CATALYST_INSTANCE_START);
  Systrace.beginSection(TRACE_TAG_REACT_JAVA_BRIDGE,"createCatalystInstance");
  final CatalystInstance catalystInstance;
  try {
    catalystInstance=catalystInstanceBuilder.build();
  }
  finally {
    Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);
    ReactMarker.logMarker(CREATE_CATALYST_INSTANCE_END);
  }
  if (mBridgeIdleDebugListener != null) {
    catalystInstance.addBridgeIdleDebugListener(mBridgeIdleDebugListener);
  }
  reactContext.initializeWithInstance(catalystInstance);
  ReactMarker.logMarker(RUN_JS_BUNDLE_START);
  catalystInstance.getReactQueueConfiguration().getJSQueueThread().runOnQueue(new Runnable(){
    @Override public void run(){
      Systrace.beginSection(TRACE_TAG_REACT_JAVA_BRIDGE,"runJSBundle");
      try {
        catalystInstance.runJSBundle();
      }
  finally {
        Systrace.endSection(TRACE_TAG_REACT_JAVA_BRIDGE);
        ReactMarker.logMarker(RUN_JS_BUNDLE_END);
      }
    }
  }
);
  return reactContext;
}
