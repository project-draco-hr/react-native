{
  mModuleId=moduleId;
  mModuleInterface=moduleInterface;
  mMethodsToIds=MapBuilder.newHashMap();
  mMethodsToTracingNames=MapBuilder.newHashMap();
  final Method[] declaredMethods=mModuleInterface.getDeclaredMethods();
  Arrays.sort(declaredMethods,new Comparator<Method>(){
    @Override public int compare(    Method lhs,    Method rhs){
      return lhs.getName().compareTo(rhs.getName());
    }
  }
);
  String previousName=null;
  for (int i=0; i < declaredMethods.length; i++) {
    Method method=declaredMethods[i];
    String name=method.getName();
    Assertions.assertCondition(!name.equals(previousName),"Method overloading is unsupported: " + mModuleInterface.getName() + "#"+ name);
    previousName=name;
    mMethodsToIds.put(method,i);
    mMethodsToTracingNames.put(method,"JSCall__" + getName() + "_"+ method.getName());
  }
}
