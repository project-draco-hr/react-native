{
  if (sSoSources == null) {
    ArrayList<SoSource> soSources=new ArrayList<>();
    String LD_LIBRARY_PATH=System.getenv("LD_LIBRARY_PATH");
    if (LD_LIBRARY_PATH == null) {
      LD_LIBRARY_PATH="/vendor/lib:/system/lib";
    }
    String[] systemLibraryDirectories=LD_LIBRARY_PATH.split(":");
    for (int i=0; i < systemLibraryDirectories.length; ++i) {
      File systemSoDirectory=new File(systemLibraryDirectories[i]);
      soSources.add(new DirectorySoSource(systemSoDirectory,DirectorySoSource.ON_LD_LIBRARY_PATH));
    }
    if (context != null) {
      ApplicationInfo applicationInfo=context.getApplicationInfo();
      boolean isSystemApplication=(applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 && (applicationInfo.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == 0;
      try {
        if (isNativeExopackageEnabled) {
          soSources.add(0,new ExoSoSource(context));
        }
 else         if (isSystemApplication) {
          soSources.add(0,new ApkSoSource(context));
        }
 else {
          SysUtil.dumbDeleteRecrusive(SysUtil.getLibsDirectory(context));
          int ourSoSourceFlags=0;
          if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            ourSoSourceFlags|=DirectorySoSource.RESOLVE_DEPENDENCIES;
          }
          SoSource ourSoSource=new DirectorySoSource(new File(applicationInfo.nativeLibraryDir),ourSoSourceFlags);
          soSources.add(0,ourSoSource);
        }
      }
 catch (      IOException ex) {
        throw new RuntimeException(ex);
      }
    }
    sSoSources=soSources.toArray(new SoSource[soSources.size()]);
  }
}
