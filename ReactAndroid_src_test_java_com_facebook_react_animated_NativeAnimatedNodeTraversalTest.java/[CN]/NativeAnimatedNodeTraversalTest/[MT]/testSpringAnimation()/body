{
  createSimpleAnimatedViewWithOpacity(1000,0d);
  Callback animationCallback=mock(Callback.class);
  mNativeAnimatedNodesManager.startAnimatingNode(1,1,JavaOnlyMap.of("type","spring","friction",7d,"tension",40.0d,"initialVelocity",0d,"toValue",1d,"restSpeedThreshold",0.001d,"restDisplacementThreshold",0.001d,"overshootClamping",false),animationCallback);
  ArgumentCaptor<ReactStylesDiffMap> stylesCaptor=ArgumentCaptor.forClass(ReactStylesDiffMap.class);
  reset(mUIImplementationMock);
  mNativeAnimatedNodesManager.runUpdates(nextFrameTime());
  verify(mUIImplementationMock).synchronouslyUpdateViewOnUIThread(eq(1000),stylesCaptor.capture());
  assertThat(stylesCaptor.getValue().getDouble("opacity",Double.NaN)).isEqualTo(0);
  double previousValue=0d;
  boolean wasGreaterThanOne=false;
  for (int i=0; i < 3 * 60; i++) {
    reset(mUIImplementationMock);
    mNativeAnimatedNodesManager.runUpdates(nextFrameTime());
    verify(mUIImplementationMock,atMost(1)).synchronouslyUpdateViewOnUIThread(eq(1000),stylesCaptor.capture());
    double currentValue=stylesCaptor.getValue().getDouble("opacity",Double.NaN);
    if (currentValue > 1d) {
      wasGreaterThanOne=true;
    }
    assertThat(Math.abs(currentValue - previousValue)).isLessThan(0.1d);
    previousValue=currentValue;
  }
  assertThat(previousValue).isEqualTo(1d);
  assertThat(wasGreaterThanOne);
  reset(mUIImplementationMock);
  mNativeAnimatedNodesManager.runUpdates(nextFrameTime());
  verifyNoMoreInteractions(mUIImplementationMock);
}
