{
  createAnimatedGraphWithAdditionNode(50,100d,1000d);
  Callback animationCallback=mock(Callback.class);
  JavaOnlyArray frames=JavaOnlyArray.of(0d,1d);
  mNativeAnimatedNodesManager.startAnimatingNode(1,JavaOnlyMap.of("type","frames","frames",frames,"toValue",101d),animationCallback);
  ArgumentCaptor<ReactStylesDiffMap> stylesCaptor=ArgumentCaptor.forClass(ReactStylesDiffMap.class);
  reset(mUIImplementationMock);
  mNativeAnimatedNodesManager.runUpdates(nextFrameTime());
  verify(mUIImplementationMock).synchronouslyUpdateViewOnUIThread(eq(50),stylesCaptor.capture());
  assertThat(stylesCaptor.getValue().getDouble("translateX",Double.NaN)).isEqualTo(1100d);
  reset(mUIImplementationMock);
  mNativeAnimatedNodesManager.runUpdates(nextFrameTime());
  verify(mUIImplementationMock).synchronouslyUpdateViewOnUIThread(eq(50),stylesCaptor.capture());
  assertThat(stylesCaptor.getValue().getDouble("translateX",Double.NaN)).isEqualTo(1100d);
  reset(mUIImplementationMock);
  mNativeAnimatedNodesManager.runUpdates(nextFrameTime());
  verify(mUIImplementationMock).synchronouslyUpdateViewOnUIThread(eq(50),stylesCaptor.capture());
  assertThat(stylesCaptor.getValue().getDouble("translateX",Double.NaN)).isEqualTo(1101d);
  reset(mUIImplementationMock);
  mNativeAnimatedNodesManager.runUpdates(nextFrameTime());
  verifyNoMoreInteractions(mUIImplementationMock);
}
