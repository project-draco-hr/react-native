{
  PowerMockito.mockStatic(Arguments.class);
  PowerMockito.when(Arguments.createArray()).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return new JavaOnlyArray();
    }
  }
);
  PowerMockito.when(Arguments.createMap()).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return new JavaOnlyMap();
    }
  }
);
  mFrameTimeNanos=INITIAL_FRAME_TIME_NANOS;
  mUIManagerMock=mock(UIManagerModule.class);
  mUIImplementationMock=mock(UIImplementation.class);
  mEventDispatcherMock=mock(EventDispatcher.class);
  PowerMockito.when(mUIManagerMock.getUIImplementation()).thenAnswer(new Answer<UIImplementation>(){
    @Override public UIImplementation answer(    InvocationOnMock invocation) throws Throwable {
      return mUIImplementationMock;
    }
  }
);
  PowerMockito.when(mUIManagerMock.getEventDispatcher()).thenAnswer(new Answer<EventDispatcher>(){
    @Override public EventDispatcher answer(    InvocationOnMock invocation) throws Throwable {
      return mEventDispatcherMock;
    }
  }
);
  PowerMockito.when(mUIManagerMock.getConstants()).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return MapBuilder.of("customDirectEventTypes",MapBuilder.newHashMap());
    }
  }
);
  mNativeAnimatedNodesManager=new NativeAnimatedNodesManager(mUIManagerMock);
}
