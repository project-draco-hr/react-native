{
  if (mDevOptionsDialog != null || !mIsDevSupportEnabled) {
    return;
  }
  LinkedHashMap<String,DevOptionHandler> options=new LinkedHashMap<>();
  options.put(mApplicationContext.getString(R.string.catalyst_reloadjs),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      handleReloadJS();
    }
  }
);
  options.put(mDevSettings.isRemoteJSDebugEnabled() ? mApplicationContext.getString(R.string.catalyst_debugjs_off) : mApplicationContext.getString(R.string.catalyst_debugjs),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      mDevSettings.setRemoteJSDebugEnabled(!mDevSettings.isRemoteJSDebugEnabled());
      handleReloadJS();
    }
  }
);
  options.put(mDevSettings.isReloadOnJSChangeEnabled() ? mApplicationContext.getString(R.string.catalyst_live_reload_off) : mApplicationContext.getString(R.string.catalyst_live_reload),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      mDevSettings.setReloadOnJSChangeEnabled(!mDevSettings.isReloadOnJSChangeEnabled());
    }
  }
);
  options.put(mDevSettings.isHotModuleReplacementEnabled() ? mApplicationContext.getString(R.string.catalyst_hot_module_replacement_off) : mApplicationContext.getString(R.string.catalyst_hot_module_replacement),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      mDevSettings.setHotModuleReplacementEnabled(!mDevSettings.isHotModuleReplacementEnabled());
      handleReloadJS();
    }
  }
);
  options.put(mApplicationContext.getString(R.string.catalyst_element_inspector),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      mDevSettings.setElementInspectorEnabled(!mDevSettings.isElementInspectorEnabled());
      mReactInstanceCommandsHandler.toggleElementInspector();
    }
  }
);
  options.put(mDevSettings.isFpsDebugEnabled() ? mApplicationContext.getString(R.string.catalyst_perf_monitor_off) : mApplicationContext.getString(R.string.catalyst_perf_monitor),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      mDevSettings.setFpsDebugEnabled(!mDevSettings.isFpsDebugEnabled());
    }
  }
);
  options.put(mApplicationContext.getString(R.string.catalyst_heap_capture),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      JSCHeapCapture.captureHeap(mApplicationContext.getCacheDir().getPath(),JSCHeapUpload.captureCallback(mDevServerHelper.getHeapCaptureUploadUrl()));
    }
  }
);
  options.put(mApplicationContext.getString(R.string.catalyst_poke_sampling_profiler),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      try {
        List<String> pokeResults=JSCSamplingProfiler.poke(60000);
        for (        String result : pokeResults) {
          Toast.makeText(mCurrentContext,result == null ? "Started JSC Sampling Profiler" : "Stopped JSC Sampling Profiler",Toast.LENGTH_LONG).show();
          if (result != null) {
            new JscProfileTask(getSourceUrl()).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,result);
          }
        }
      }
 catch (      JSCSamplingProfiler.ProfilerException e) {
        showNewJavaError(e.getMessage(),e);
      }
    }
  }
);
  options.put(mApplicationContext.getString(R.string.catalyst_settings),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      Intent intent=new Intent(mApplicationContext,DevSettingsActivity.class);
      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      mApplicationContext.startActivity(intent);
    }
  }
);
  if (mCustomDevOptions.size() > 0) {
    options.putAll(mCustomDevOptions);
  }
  final DevOptionHandler[] optionHandlers=options.values().toArray(new DevOptionHandler[0]);
  mDevOptionsDialog=new AlertDialog.Builder(mApplicationContext).setItems(options.keySet().toArray(new String[0]),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      optionHandlers[which].onOptionSelected();
      mDevOptionsDialog=null;
    }
  }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      mDevOptionsDialog=null;
    }
  }
).create();
  mDevOptionsDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
  mDevOptionsDialog.show();
}
