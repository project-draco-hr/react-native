{
  OkHttpClient client=new OkHttpClient.Builder().connectTimeout(10,TimeUnit.SECONDS).writeTimeout(10,TimeUnit.SECONDS).readTimeout(0,TimeUnit.MINUTES).build();
  Request.Builder builder=new Request.Builder().tag(id).url(url);
  if (url != null) {
    CookieManager cookieManager=CookieManager.getInstance();
    Uri parsedUrl=Uri.parse(url);
    Uri.Builder builtUrl=parsedUrl.buildUpon();
    if (parsedUrl.getScheme().equals("wss")) {
      builtUrl.scheme("https");
    }
    String cookie=cookieManager.getCookie(builtUrl.build().toString());
    if (cookie != null) {
      builder.addHeader("Cookie",cookie);
    }
  }
  if (headers != null) {
    ReadableMapKeySetIterator iterator=headers.keySetIterator();
    if (!headers.hasKey("origin")) {
      builder.addHeader("origin",setDefaultOrigin(url));
    }
    while (iterator.hasNextKey()) {
      String key=iterator.nextKey();
      if (ReadableType.String.equals(headers.getType(key))) {
        builder.addHeader(key,headers.getString(key));
      }
 else {
        FLog.w(ReactConstants.TAG,"Ignoring: requested " + key + ", value not a string");
      }
    }
  }
 else {
    builder.addHeader("origin",setDefaultOrigin(url));
  }
  if (protocols != null && protocols.size() > 0) {
    StringBuilder protocolsValue=new StringBuilder("");
    for (int i=0; i < protocols.size(); i++) {
      String v=protocols.getString(i).trim();
      if (!v.isEmpty() && !v.contains(",")) {
        protocolsValue.append(v);
        protocolsValue.append(",");
      }
    }
    if (protocolsValue.length() > 0) {
      protocolsValue.replace(protocolsValue.length() - 1,protocolsValue.length(),"");
      builder.addHeader("Sec-WebSocket-Protocol",protocolsValue.toString());
    }
  }
  WebSocketCall.create(client,builder.build()).enqueue(new WebSocketListener(){
    @Override public void onOpen(    WebSocket webSocket,    Response response){
      mWebSocketConnections.put(id,webSocket);
      WritableMap params=Arguments.createMap();
      params.putInt("id",id);
      sendEvent("websocketOpen",params);
    }
    @Override public void onClose(    int code,    String reason){
      WritableMap params=Arguments.createMap();
      params.putInt("id",id);
      params.putInt("code",code);
      params.putString("reason",reason);
      sendEvent("websocketClosed",params);
    }
    @Override public void onFailure(    IOException e,    Response response){
      notifyWebSocketFailed(id,e.getMessage());
    }
    @Override public void onPong(    Buffer buffer){
    }
    @Override public void onMessage(    ResponseBody response) throws IOException {
      String message;
      try {
        if (response.contentType() == WebSocket.BINARY) {
          message=Base64.encodeToString(response.source().readByteArray(),Base64.NO_WRAP);
        }
 else {
          message=response.source().readUtf8();
        }
      }
 catch (      IOException e) {
        notifyWebSocketFailed(id,e.getMessage());
        return;
      }
      try {
        response.source().close();
      }
 catch (      IOException e) {
        FLog.e(ReactConstants.TAG,"Could not close BufferedSource for WebSocket id " + id,e);
      }
      WritableMap params=Arguments.createMap();
      params.putInt("id",id);
      params.putString("data",message);
      params.putString("type",response.contentType() == WebSocket.BINARY ? "binary" : "text");
      sendEvent("websocketMessage",params);
    }
  }
);
  client.dispatcher().executorService().shutdown();
}
