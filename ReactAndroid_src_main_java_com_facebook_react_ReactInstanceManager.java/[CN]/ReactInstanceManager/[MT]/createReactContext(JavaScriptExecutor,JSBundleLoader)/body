{
  NativeModuleRegistry.Builder nativeRegistryBuilder=new NativeModuleRegistry.Builder();
  JavaScriptModulesConfig.Builder jsModulesBuilder=new JavaScriptModulesConfig.Builder();
  ReactApplicationContext reactContext=new ReactApplicationContext(mApplicationContext);
  if (mUseDeveloperSupport) {
    reactContext.setNativeModuleCallExceptionHandler(mDevSupportManager);
  }
  CoreModulesPackage coreModulesPackage=new CoreModulesPackage(this,mBackBtnHandler);
  processPackage(coreModulesPackage,reactContext,nativeRegistryBuilder,jsModulesBuilder);
  for (  ReactPackage reactPackage : mPackages) {
    processPackage(reactPackage,reactContext,nativeRegistryBuilder,jsModulesBuilder);
  }
  CatalystInstance.Builder catalystInstanceBuilder=new CatalystInstance.Builder().setCatalystQueueConfigurationSpec(CatalystQueueConfigurationSpec.createDefault()).setJSExecutor(jsExecutor).setRegistry(nativeRegistryBuilder.build()).setJSModulesConfig(jsModulesBuilder.build()).setJSBundleLoader(jsBundleLoader).setNativeModuleCallExceptionHandler(mDevSupportManager);
  CatalystInstance catalystInstance=catalystInstanceBuilder.build();
  if (mBridgeIdleDebugListener != null) {
    catalystInstance.addBridgeIdleDebugListener(mBridgeIdleDebugListener);
  }
  reactContext.initializeWithInstance(catalystInstance);
  catalystInstance.initialize();
  mDevSupportManager.onNewReactContextCreated(reactContext);
  moveReactContextToCurrentLifecycleState(reactContext);
  return reactContext;
}
