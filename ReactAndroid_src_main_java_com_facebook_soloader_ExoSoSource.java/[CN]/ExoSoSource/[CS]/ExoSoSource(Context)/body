{
  super(SysUtil.createLibsDirectory(context),DirectorySoSource.RESOLVE_DEPENDENCIES);
  File libsDir=super.soDirectory;
  if (DEBUG) {
    Log.v(TAG,"synchronizing log directory: " + libsDir);
  }
  Map<String,File> providedLibraries=findProvidedLibraries(context);
  try (FileLocker lock=SysUtil.lockLibsDirectory(context)){
    File extantFiles[]=libsDir.listFiles();
    for (int i=0; i < extantFiles.length; ++i) {
      File extantFile=extantFiles[i];
      if (DEBUG) {
        Log.v(TAG,"considering libdir file: " + extantFile);
      }
      String name=extantFile.getName();
      File sourceFile=providedLibraries.get(name);
      boolean shouldDelete=(sourceFile == null || sourceFile.length() != extantFile.length() || sourceFile.lastModified() != extantFile.lastModified());
      boolean upToDate=(sourceFile != null && !shouldDelete);
      if (shouldDelete) {
        if (DEBUG) {
          Log.v(TAG,"deleting obsolete or unexpected file: " + extantFile);
        }
        SysUtil.deleteOrThrow(extantFile);
      }
      if (upToDate) {
        if (DEBUG) {
          Log.v(TAG,"found up-to-date library: " + extantFile);
        }
        providedLibraries.remove(name);
      }
    }
    for (    String soName : providedLibraries.keySet()) {
      File sourceFile=providedLibraries.get(soName);
      try (InputStream is=new FileInputStream(sourceFile)){
        if (DEBUG) {
          Log.v(TAG,"extracting library: " + soName);
        }
        SysUtil.reliablyCopyExecutable(is,new File(libsDir,soName),sourceFile.length(),sourceFile.lastModified());
      }
       SysUtil.freeCopyBuffer();
    }
  }
 }
