{
  File source=new File(mUri.getPath());
  FileChannel input=null, output=null;
  try {
    File exportDir=(mType == MediaType.PHOTO) ? Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES) : Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);
    exportDir.mkdirs();
    if (!exportDir.isDirectory()) {
      mPromise.reject(ERROR_UNABLE_TO_LOAD,"External media storage directory not available");
      return;
    }
    File dest=new File(exportDir,source.getName());
    int n=0;
    String fullSourceName=source.getName();
    String sourceName, sourceExt;
    if (fullSourceName.indexOf('.') >= 0) {
      sourceName=fullSourceName.substring(0,fullSourceName.lastIndexOf('.'));
      sourceExt=fullSourceName.substring(fullSourceName.lastIndexOf('.'));
    }
 else {
      sourceName=fullSourceName;
      sourceExt="";
    }
    while (!dest.createNewFile()) {
      dest=new File(exportDir,sourceName + "_" + (n++)+ sourceExt);
    }
    input=new FileInputStream(source).getChannel();
    output=new FileOutputStream(dest).getChannel();
    output.transferFrom(input,0,input.size());
    input.close();
    output.close();
    MediaScannerConnection.scanFile(mContext,new String[]{dest.getAbsolutePath()},null,new MediaScannerConnection.OnScanCompletedListener(){
      @Override public void onScanCompleted(      String path,      Uri uri){
        if (uri != null) {
          mPromise.resolve(uri.toString());
        }
 else {
          mPromise.reject(ERROR_UNABLE_TO_SAVE,"Could not add image to gallery");
        }
      }
    }
);
  }
 catch (  IOException e) {
    mPromise.reject(e);
  }
 finally {
    if (input != null && input.isOpen()) {
      try {
        input.close();
      }
 catch (      IOException e) {
        FLog.e(ReactConstants.TAG,"Could not close input channel",e);
      }
    }
    if (output != null && output.isOpen()) {
      try {
        output.close();
      }
 catch (      IOException e) {
        FLog.e(ReactConstants.TAG,"Could not close output channel",e);
      }
    }
  }
}
