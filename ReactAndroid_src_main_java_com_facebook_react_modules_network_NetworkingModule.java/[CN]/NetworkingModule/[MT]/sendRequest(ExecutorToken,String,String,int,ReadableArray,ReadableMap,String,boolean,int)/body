{
  Request.Builder requestBuilder=new Request.Builder().url(url);
  if (requestId != 0) {
    requestBuilder.tag(requestId);
  }
  final RCTDeviceEventEmitter eventEmitter=getEventEmitter(executorToken);
  OkHttpClient.Builder clientBuilder=mClient.newBuilder();
  if (useIncrementalUpdates) {
    clientBuilder.addNetworkInterceptor(new Interceptor(){
      @Override public Response intercept(      Interceptor.Chain chain) throws IOException {
        Response originalResponse=chain.proceed(chain.request());
        ProgressResponseBody responseBody=new ProgressResponseBody(originalResponse.body(),new ProgressListener(){
          long last=System.nanoTime();
          @Override public void onProgress(          long bytesWritten,          long contentLength,          boolean done){
            long now=System.nanoTime();
            if (!done && !shouldDispatch(now,last)) {
              return;
            }
            if (responseType.equals("text")) {
              return;
            }
            ResponseUtil.onDataReceivedProgress(eventEmitter,requestId,bytesWritten,contentLength);
            last=now;
          }
        }
);
        return originalResponse.newBuilder().body(responseBody).build();
      }
    }
);
  }
  if (timeout != mClient.connectTimeoutMillis()) {
    clientBuilder.readTimeout(timeout,TimeUnit.MILLISECONDS);
  }
  OkHttpClient client=clientBuilder.build();
  Headers requestHeaders=extractHeaders(headers,data);
  if (requestHeaders == null) {
    ResponseUtil.onRequestError(eventEmitter,requestId,"Unrecognized headers format",null);
    return;
  }
  String contentType=requestHeaders.get(CONTENT_TYPE_HEADER_NAME);
  String contentEncoding=requestHeaders.get(CONTENT_ENCODING_HEADER_NAME);
  requestBuilder.headers(requestHeaders);
  if (data == null) {
    requestBuilder.method(method,RequestBodyUtil.getEmptyBody(method));
  }
 else   if (data.hasKey(REQUEST_BODY_KEY_STRING)) {
    if (contentType == null) {
      ResponseUtil.onRequestError(eventEmitter,requestId,"Payload is set but no content-type header specified",null);
      return;
    }
    String body=data.getString(REQUEST_BODY_KEY_STRING);
    MediaType contentMediaType=MediaType.parse(contentType);
    if (RequestBodyUtil.isGzipEncoding(contentEncoding)) {
      RequestBody requestBody=RequestBodyUtil.createGzip(contentMediaType,body);
      if (requestBody == null) {
        ResponseUtil.onRequestError(eventEmitter,requestId,"Failed to gzip request body",null);
        return;
      }
      requestBuilder.method(method,requestBody);
    }
 else {
      requestBuilder.method(method,RequestBody.create(contentMediaType,body));
    }
  }
 else   if (data.hasKey(REQUEST_BODY_KEY_URI)) {
    if (contentType == null) {
      ResponseUtil.onRequestError(eventEmitter,requestId,"Payload is set but no content-type header specified",null);
      return;
    }
    String uri=data.getString(REQUEST_BODY_KEY_URI);
    InputStream fileInputStream=RequestBodyUtil.getFileInputStream(getReactApplicationContext(),uri);
    if (fileInputStream == null) {
      ResponseUtil.onRequestError(eventEmitter,requestId,"Could not retrieve file for uri " + uri,null);
      return;
    }
    requestBuilder.method(method,RequestBodyUtil.create(MediaType.parse(contentType),fileInputStream));
  }
 else   if (data.hasKey(REQUEST_BODY_KEY_FORMDATA)) {
    if (contentType == null) {
      contentType="multipart/form-data";
    }
    ReadableArray parts=data.getArray(REQUEST_BODY_KEY_FORMDATA);
    MultipartBody.Builder multipartBuilder=constructMultipartBody(executorToken,parts,contentType,requestId);
    if (multipartBuilder == null) {
      return;
    }
    requestBuilder.method(method,RequestBodyUtil.createProgressRequest(multipartBuilder.build(),new ProgressListener(){
      long last=System.nanoTime();
      @Override public void onProgress(      long bytesWritten,      long contentLength,      boolean done){
        long now=System.nanoTime();
        if (done || shouldDispatch(now,last)) {
          ResponseUtil.onDataSend(eventEmitter,requestId,bytesWritten,contentLength);
          last=now;
        }
      }
    }
));
  }
 else {
    requestBuilder.method(method,RequestBodyUtil.getEmptyBody(method));
  }
  addRequest(requestId);
  client.newCall(requestBuilder.build()).enqueue(new Callback(){
    @Override public void onFailure(    Call call,    IOException e){
      if (mShuttingDown) {
        return;
      }
      removeRequest(requestId);
      ResponseUtil.onRequestError(eventEmitter,requestId,e.getMessage(),e);
    }
    @Override public void onResponse(    Call call,    Response response) throws IOException {
      if (mShuttingDown) {
        return;
      }
      removeRequest(requestId);
      ResponseUtil.onResponseReceived(eventEmitter,requestId,response.code(),translateHeaders(response.headers()),response.request().url().toString());
      ResponseBody responseBody=response.body();
      try {
        if (useIncrementalUpdates && responseType.equals("text")) {
          readWithProgress(eventEmitter,requestId,responseBody);
          ResponseUtil.onRequestSuccess(eventEmitter,requestId);
          return;
        }
        String responseString="";
        if (responseType.equals("text")) {
          responseString=responseBody.string();
        }
 else         if (responseType.equals("base64")) {
          responseString=Base64.encodeToString(responseBody.bytes(),Base64.NO_WRAP);
        }
        ResponseUtil.onDataReceived(eventEmitter,requestId,responseString);
        ResponseUtil.onRequestSuccess(eventEmitter,requestId);
      }
 catch (      IOException e) {
        ResponseUtil.onRequestError(eventEmitter,requestId,e.getMessage(),e);
      }
    }
  }
);
}
