{
  Request.Builder requestBuilder=new Request.Builder().url(url);
  if (requestId != 0) {
    requestBuilder.tag(requestId);
  }
  OkHttpClient client=mClient;
  if (timeout != mClient.connectTimeoutMillis()) {
    client=mClient.newBuilder().readTimeout(timeout,TimeUnit.MILLISECONDS).build();
  }
  Headers requestHeaders=extractHeaders(headers,data);
  if (requestHeaders == null) {
    onRequestError(executorToken,requestId,"Unrecognized headers format",null);
    return;
  }
  String contentType=requestHeaders.get(CONTENT_TYPE_HEADER_NAME);
  String contentEncoding=requestHeaders.get(CONTENT_ENCODING_HEADER_NAME);
  requestBuilder.headers(requestHeaders);
  if (data == null) {
    requestBuilder.method(method,RequestBodyUtil.getEmptyBody(method));
  }
 else   if (data.hasKey(REQUEST_BODY_KEY_STRING)) {
    if (contentType == null) {
      onRequestError(executorToken,requestId,"Payload is set but no content-type header specified",null);
      return;
    }
    String body=data.getString(REQUEST_BODY_KEY_STRING);
    MediaType contentMediaType=MediaType.parse(contentType);
    if (RequestBodyUtil.isGzipEncoding(contentEncoding)) {
      RequestBody requestBody=RequestBodyUtil.createGzip(contentMediaType,body);
      if (requestBody == null) {
        onRequestError(executorToken,requestId,"Failed to gzip request body",null);
        return;
      }
      requestBuilder.method(method,requestBody);
    }
 else {
      requestBuilder.method(method,RequestBody.create(contentMediaType,body));
    }
  }
 else   if (data.hasKey(REQUEST_BODY_KEY_URI)) {
    if (contentType == null) {
      onRequestError(executorToken,requestId,"Payload is set but no content-type header specified",null);
      return;
    }
    String uri=data.getString(REQUEST_BODY_KEY_URI);
    InputStream fileInputStream=RequestBodyUtil.getFileInputStream(getReactApplicationContext(),uri);
    if (fileInputStream == null) {
      onRequestError(executorToken,requestId,"Could not retrieve file for uri " + uri,null);
      return;
    }
    requestBuilder.method(method,RequestBodyUtil.create(MediaType.parse(contentType),fileInputStream));
  }
 else   if (data.hasKey(REQUEST_BODY_KEY_FORMDATA)) {
    if (contentType == null) {
      contentType="multipart/form-data";
    }
    ReadableArray parts=data.getArray(REQUEST_BODY_KEY_FORMDATA);
    MultipartBody.Builder multipartBuilder=constructMultipartBody(executorToken,parts,contentType,requestId);
    if (multipartBuilder == null) {
      return;
    }
    requestBuilder.method(method,multipartBuilder.build());
  }
 else {
    requestBuilder.method(method,RequestBodyUtil.getEmptyBody(method));
  }
  client.newCall(requestBuilder.build()).enqueue(new Callback(){
    @Override public void onFailure(    Call call,    IOException e){
      if (mShuttingDown) {
        return;
      }
      onRequestError(executorToken,requestId,e.getMessage(),e);
    }
    @Override public void onResponse(    Call call,    Response response) throws IOException {
      if (mShuttingDown) {
        return;
      }
      onResponseReceived(executorToken,requestId,response);
      ResponseBody responseBody=response.body();
      try {
        if (useIncrementalUpdates) {
          readWithProgress(executorToken,requestId,responseBody);
          onRequestSuccess(executorToken,requestId);
        }
 else {
          onDataReceived(executorToken,requestId,responseBody.string());
          onRequestSuccess(executorToken,requestId);
        }
      }
 catch (      IOException e) {
        onRequestError(executorToken,requestId,e.getMessage(),e);
      }
    }
  }
);
}
