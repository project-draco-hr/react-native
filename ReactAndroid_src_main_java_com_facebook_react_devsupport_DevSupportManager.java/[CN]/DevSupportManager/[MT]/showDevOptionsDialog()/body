{
  if (mDevOptionsDialog != null || !mIsDevSupportEnabled) {
    return;
  }
  LinkedHashMap<String,DevOptionHandler> options=new LinkedHashMap<>();
  options.put(mApplicationContext.getString(R.string.catalyst_reloadjs),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      handleReloadJS();
    }
  }
);
  options.put(mIsUsingJSProxy ? mApplicationContext.getString(R.string.catalyst_debugjs_off) : mApplicationContext.getString(R.string.catalyst_debugjs),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      mIsUsingJSProxy=!mIsUsingJSProxy;
      handleReloadJS();
    }
  }
);
  options.put(mApplicationContext.getString(R.string.catalyst_settings),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      Intent intent=new Intent(mApplicationContext,DevSettingsActivity.class);
      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      mApplicationContext.startActivity(intent);
    }
  }
);
  options.put(mApplicationContext.getString(R.string.catalyst_inspect_element),new DevOptionHandler(){
    @Override public void onOptionSelected(){
      mReactInstanceCommandsHandler.toggleElementInspector();
    }
  }
);
  if (mCurrentContext != null && mCurrentContext.getCatalystInstance() != null && mCurrentContext.getCatalystInstance().getBridge() != null && mCurrentContext.getCatalystInstance().getBridge().supportsProfiling()) {
    options.put(mApplicationContext.getString(mIsCurrentlyProfiling ? R.string.catalyst_stop_profile : R.string.catalyst_start_profile),new DevOptionHandler(){
      @Override public void onOptionSelected(){
        if (mCurrentContext != null && mCurrentContext.hasActiveCatalystInstance()) {
          if (mIsCurrentlyProfiling) {
            mIsCurrentlyProfiling=false;
            String profileName=(Environment.getExternalStorageDirectory().getPath() + "/profile_" + mProfileIndex+ ".json");
            mProfileIndex++;
            mCurrentContext.getCatalystInstance().getBridge().stopProfiler("profile",profileName);
            Toast.makeText(mCurrentContext,"Profile output to " + profileName,Toast.LENGTH_LONG).show();
          }
 else {
            mIsCurrentlyProfiling=true;
            mCurrentContext.getCatalystInstance().getBridge().startProfiler("profile");
          }
        }
      }
    }
);
  }
  if (mCustomDevOptions.size() > 0) {
    options.putAll(mCustomDevOptions);
  }
  final DevOptionHandler[] optionHandlers=options.values().toArray(new DevOptionHandler[0]);
  mDevOptionsDialog=new AlertDialog.Builder(mApplicationContext).setItems(options.keySet().toArray(new String[0]),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      optionHandlers[which].onOptionSelected();
      mDevOptionsDialog=null;
    }
  }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      mDevOptionsDialog=null;
    }
  }
).create();
  mDevOptionsDialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);
  mDevOptionsDialog.show();
}
